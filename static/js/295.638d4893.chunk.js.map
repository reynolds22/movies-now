{"version":3,"file":"static/js/295.638d4893.chunk.js","mappings":"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","sources":["component/AddToPlaylistPopup.jsx","component/carousel.jsx","component/MovieCard.jsx","component/TvCard.jsx","component/newMovies.jsx","component/index.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./AddToPlaylistPopup.css\";\n\nexport default function AddToPlaylistPopup({ playlists, onAdd, onClose, position }) {\n    return (\n        <div\n            className=\"popup-container\"\n            style={{ top: position.top, left: position.left }}\n        >\n            <h3>Select a Playlist</h3> \n            <ul>\n                {playlists.map((playlist) => (\n                    <li key={playlist.id}>\n<button\n  onClick={() => {\n    console.log(\"Adding to Playlist ID:\", playlist.id); // Debug playlist ID\n    if (onAdd) {\n      onAdd(playlist.id); // Call the onAdd function with playlist ID\n    } else {\n      console.error(\"onAdd function is missing\");\n    }\n  }}\n>\n  {playlist.name}\n</button>\n                    </li>\n                ))}\n            </ul>\n            <button className=\"close-btn\" onClick={onClose}>\n                Close\n            </button>\n        </div>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport \"./carousel.css\";\nimport image1 from \"./pics/Best-Movie.jpg\";\nimport image2 from \"./pics/Gladiator.avif\";\nimport image3 from \"./pics/new.webp\";\nimport image4 from \"./pics/older.jpeg\";\nimport image5 from \"./pics/JFHpU0id.jpeg\";\nimport image6 from \"./pics/animated.jpg\";\n\nconst images = [image1, image2, image3, image4, image5, image6];\n\nfunction Carousel(){\n    const [currentFrame, setCurrentFrame] = useState(0);\n\n    useEffect(()=>{\n        const timer = setInterval(() => {\n            setCurrentFrame(prevIndex => (prevIndex + 1) % images.length);\n        }, 7000);\n        return () => clearInterval(timer);\n    }, []);\n\n    return (\n        <div className='carousel'>\n            <div \n                className=\"carousel-inner\"\n                style={{ transform: `translateX(-${currentFrame * 100}%)` }}\n            >\n                {images.map((image, index) => (\n                    <div \n                        className=\"carousel-item\"\n                        key={index}\n                        style={{ backgroundImage: `url(${image})` }}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Carousel;\n","import React, { useState, useEffect } from \"react\";\nimport \"./movieCard.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport AddToPlaylistPopup from \"./AddToPlaylistPopup\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_Key = \"808196157aa973f359929571d9321e60\";\nconst DISCOVER_URL = \"https://api.themoviedb.org/3/discover/movie\";\nconst CATEGORY_URL = \"https://api.themoviedb.org/3/movie\";\n\nexport default function MovieCard({\n  title,\n  category,\n  pages = 1,\n  genreId,\n  keyword,\n  playlists,\n  addMovieToPlaylist,\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      let allMovies = [];\n      for (let page = 1; page <= pages; page++) {\n        try {\n          const url = genreId || keyword\n            ? `${DISCOVER_URL}?api_key=${API_Key}&page=${page}&with_genres=${genreId || \"\"}&with_keywords=${keyword || \"\"}`\n            : `${CATEGORY_URL}/${category}?api_key=${API_Key}&page=${page}`;\n          const response = await fetch(url);\n          const data = await response.json();\n          if (data.results) allMovies = [...allMovies, ...data.results];\n        } catch (err) {\n          console.error(\"Error fetching movies:\", err);\n        }\n      }\n      setMovies(allMovies);\n    };\n    fetchMovies();\n  }, [category, pages, genreId, keyword]);\n\n  const handleCardClick = (movie) => {\n    navigate(`/details/movie/${movie.id}`);\n  };\n\n  const handleOpenPopup = (movie, event) => {\n    const buttonRect = event.target.getBoundingClientRect();\n    setPopupPosition({\n      top: buttonRect.bottom + window.scrollY,\n      left: buttonRect.left + window.scrollX,\n    });\n    setSelectedMovie(movie);\n    setIsPopupOpen(true);\n  };\n\n  const handleAddToPlaylist = (playlistId) => {\n    addMovieToPlaylist(playlistId, selectedMovie);\n    setIsPopupOpen(false);\n  };\n\n  return (\n    <div className=\"card-container\">\n      <h2>{title}</h2>\n      <div className=\"Popular-movies\">\n        {movies.map((movie, index) => (\n          <div\n            className=\"film-card\"\n            key={`${movie.id}-${index}`}\n            onClick={() => handleCardClick(movie)}\n          >\n            <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n            <h3>{movie.title}</h3>\n            <button\n              className=\"add-movie\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleOpenPopup(movie, e);\n              }}\n            >\n              <FontAwesomeIcon className=\"list-img\" icon={faList} />\n              <p>Add Movie</p>\n            </button>\n            <div className=\"stars\">\n              <p className=\"p1\">{movie.release_date ? movie.release_date.slice(0, 4) : \"N/A\"}</p>\n              <div className=\"p2\">\n                <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                <p>{movie.vote_average ? movie.vote_average.toFixed(1) : \"N/A\"}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div> \n      {isPopupOpen && (\n        <AddToPlaylistPopup\n          playlists={playlists}\n          onAdd={handleAddToPlaylist}\n          onClose={() => setIsPopupOpen(false)}\n          position={popupPosition}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./TvCard.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport AddToPlaylistPopup from \"./AddToPlaylistPopup\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_Key = \"808196157aa973f359929571d9321e60\";\nconst TV_BASE_URL = \"https://api.themoviedb.org/3/tv\";\nconst TV_DISCOVER_URL = \"https://api.themoviedb.org/3/discover/tv\";\n\nfunction TvCard({ title, category, pages = 1, genreId, keyword, playlists, addShowToPlaylist }) {\n    const [shows, setShows] = useState([]);\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [selectedShow, setSelectedShow] = useState(null);\n    const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchShows = async () => {\n            let allShows = [];\n            for (let page = 1; page <= pages; page++) {\n                try {\n                    const url = genreId || keyword\n                        ? `${TV_DISCOVER_URL}?api_key=${API_Key}&page=${page}&with_genres=${genreId || \"\"}&with_keywords=${keyword || \"\"}`\n                        : `${TV_BASE_URL}/${category}?api_key=${API_Key}&page=${page}`;\n                    const response = await fetch(url);\n                    const data = await response.json();\n                    if (data.results) allShows = [...allShows, ...data.results];\n                } catch (err) {\n                    console.error(\"Error fetching shows:\", err);\n                }\n            }\n            setShows(allShows);\n        };\n        fetchShows();\n    }, [category, pages, genreId, keyword]);\n\n    const handleCardClick = (show) => {\n        navigate(`/details/tv/${show.id}`);\n    };\n\n    const handleOpenPopup = (show, event) => {\n        const buttonRect = event.target.getBoundingClientRect();\n        setPopupPosition({\n            top: buttonRect.bottom + window.scrollY,\n            left: buttonRect.left + window.scrollX,\n        });\n        setSelectedShow(show);\n        setIsPopupOpen(true);\n    };\n\n    const handleAddToPlaylist = (playlistId) => {\n        if (selectedShow) {\n          const standardizedShow = {\n            id: selectedShow.id,\n            name: selectedShow.name || \"Untitled Show\",\n            poster_path: selectedShow.poster_path || null,\n            first_air_date: selectedShow.first_air_date || \"N/A\",\n            vote_average: selectedShow.vote_average || 0,\n          };\n      \n          console.log(\"Adding selected show to playlist:\", standardizedShow); // Debugging\n          addShowToPlaylist(playlistId, standardizedShow);\n          setIsPopupOpen(false);\n        }\n      };\n            \n    return (\n        <div className=\"tv-card-container\">\n            <h2>{title}</h2>\n            <div className=\"Popular-tv\">\n                {shows.map((show, index) => (\n                    <div\n                        className=\"film-card\"\n                        key={`${title}-${index}-${show.id}`}\n                        onClick={() => handleCardClick(show)}\n                    >\n                        <img src={`https://image.tmdb.org/t/p/w500${show.poster_path}`} alt={show.name} />\n                        <h3>{show.name}</h3>\n                        <button\n                            className=\"add-movie\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                handleOpenPopup(show, e);\n                            }}\n                        >\n                            <FontAwesomeIcon className=\"list-img\" icon={faList} />\n                            <p>Add to Playlist</p>\n                        </button>\n                        <div className=\"stars\">\n                            <p className=\"p1\">{show.first_air_date ? show.first_air_date.slice(0, 4) : \"N/A\"}</p>\n                            <div className=\"p2\">\n                                <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                                <p>{show.vote_average ? show.vote_average.toFixed(1) : \"N/A\"}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            {isPopupOpen && (\n                <AddToPlaylistPopup\n                    playlists={playlists}\n                    onAdd={handleAddToPlaylist}\n                    onClose={() => setIsPopupOpen(false)}\n                    position={popupPosition}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default TvCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./newMovies.css\";\n\nconst API_Key = '808196157aa973f359929571d9321e60';\nconst UPCOMING_URL = `https://api.themoviedb.org/3/movie/upcoming`;\nconst VIDEOS_URL = 'https://api.themoviedb.org/3/movie';\n\nfunction MovieCard({ trailerIndex }) {\n    const [trailers, setTrailers] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchUpcomingMoviesAndTrailers = async () => {\n            try {\n                const response = await fetch(`${UPCOMING_URL}?api_key=${API_Key}`);\n                const data = await response.json();\n                const upcomingMovies = data.results.slice(0, 5); // Limit to 5 movies\n\n                const movieTrailerPromises = upcomingMovies.map(async (movie) => {\n                    const trailerResponse = await fetch(`${VIDEOS_URL}/${movie.id}/videos?api_key=${API_Key}`);\n                    const trailerData = await trailerResponse.json();\n                    const trailer = trailerData.results.find((video) => video.type === \"Trailer\");\n                    return { ...movie, trailer };\n                });\n\n                const trailersWithVideos = await Promise.all(movieTrailerPromises);\n                setTrailers(trailersWithVideos);\n                setIsLoading(false);\n            } catch (err) {\n                console.error('Error fetching trailers:', err);\n            }\n        };\n\n        fetchUpcomingMoviesAndTrailers();\n    }, []);\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    if (!trailers[trailerIndex] || !trailers[trailerIndex].trailer) {\n        return <div>No trailer available for this movie.</div>;\n    }\n\n    const selectedTrailer = trailers[trailerIndex];\n\n    return (\n        <div className=\"movie-trailer-card\">\n            <h2>{`${selectedTrailer.title} Movie Trailer`}</h2>\n            <div className=\"trailer-con\">\n            <iframe\n                width=\"560\"\n                height=\"315\"\n                src={`https://www.youtube.com/embed/${selectedTrailer.trailer.key}?enablejsapi=1`} // Ensure `enablejsapi=1` for API control\n                title={selectedTrailer.title}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n            ></iframe>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieCard;\n","import React, { useState } from \"react\";\nimport Carousel from \"./carousel\";\nimport MovieCard from \"./MovieCard\";\nimport TvCard from \"./TvCard\";\nimport NewTrailers from \"./newMovies\";\nimport \"./styles.css\";\nimport Header from \"./header\";\nimport SlidingMenu from \"./SlidingMenu\";\n\nfunction MoviesNow({ playlists, setPlaylists, addMovieToPlaylist }) {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    const toggleMenu = () => {\n        setIsMenuOpen(!isMenuOpen);\n    };\n\n    const addShowToPlaylist = (playlistId, show) => {\n        console.log(\"Adding show:\", show);\n        console.log(\"To playlist ID:\", playlistId);\n    \n        const updatedPlaylists = playlists.map((playlist) => {\n            if (playlist.id === playlistId) {\n                console.log(\"Updating playlist:\", playlist.name);\n                const updatedShows = playlist.shows ? [...playlist.shows, show] : [show];\n                return { ...playlist, shows: updatedShows };\n            }\n            return playlist;\n        }); \n    \n        console.log(\"Updated playlists:\", updatedPlaylists);\n        setPlaylists(updatedPlaylists); // Update playlists state\n    };\n    \n    return (\n        <div className=\"container\">\n            <Header toggleMenu={toggleMenu} />\n            <SlidingMenu isOpen={isMenuOpen} closeMenu={() => setIsMenuOpen(false)} />\n            <div className=\"body\">\n                <div className=\"carousel-container\">\n                    <Carousel />\n                    <div className=\"h1-Container\">\n                        <h1>Movies Now</h1>\n                    </div>\n                </div>\n\n                {/* Movie Cards */}\n                <MovieCard\n                    title=\"In Theaters Now\"\n                    category=\"now_playing\"\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Upcoming Movies\"\n                    category=\"upcoming\"\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Action Movies\"\n                    genreId={28}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={0} />\n\n                <MovieCard\n                    title=\"Comedy Movies\"\n                    genreId={35}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Trending\"\n                    category=\"popular\"\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Superhero Movies\"\n                    keyword=\"9715\"\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={1} />\n\n                <MovieCard\n                    title=\"Horror Movies\"\n                    genreId={27}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Animated Movies\"\n                    genreId={16}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Sci-Fi Movies\"\n                    genreId={878}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={2} />\n\n                {/* TV Cards */}\n                <TvCard\n                    title=\"Popular TV Shows\"\n                    category=\"popular\"\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Comedy TV Shows\"\n                    genreId={35}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Drama TV Shows\"\n                    genreId={18}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Action & Adventure TV Shows\"\n                    genreId={10759}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Sci-Fi & Fantasy TV Shows\"\n                    genreId={10765}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={3} />\n\n                <MovieCard\n                    title=\"Adventure\"\n                    genreId={878}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Family\"\n                    genreId={10751}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Documentary\"\n                    genreId={99}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Drama Movies\"\n                    genreId={18}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default MoviesNow;\n"],"names":["AddToPlaylistPopup","_ref","playlists","onAdd","onClose","position","_jsxs","className","style","top","left","children","_jsx","map","playlist","onClick","console","log","id","error","name","images","image1","image2","image3","image4","image5","image6","currentFrame","setCurrentFrame","useState","useEffect","timer","setInterval","prevIndex","length","clearInterval","transform","image","index","backgroundImage","API_Key","DISCOVER_URL","CATEGORY_URL","MovieCard","title","category","pages","genreId","keyword","addMovieToPlaylist","movies","setMovies","isPopupOpen","setIsPopupOpen","selectedMovie","setSelectedMovie","popupPosition","setPopupPosition","navigate","useNavigate","async","allMovies","page","url","response","fetch","data","json","results","err","fetchMovies","movie","handleCardClick","src","poster_path","alt","e","stopPropagation","handleOpenPopup","event","buttonRect","target","getBoundingClientRect","bottom","window","scrollY","scrollX","FontAwesomeIcon","icon","faList","release_date","slice","faStar","vote_average","toFixed","playlistId","addShowToPlaylist","shows","setShows","selectedShow","setSelectedShow","allShows","fetchShows","show","first_air_date","standardizedShow","trailerIndex","trailers","setTrailers","isLoading","setIsLoading","movieTrailerPromises","trailerResponse","trailer","find","video","type","trailersWithVideos","Promise","all","fetchUpcomingMoviesAndTrailers","selectedTrailer","width","height","key","frameBorder","allow","allowFullScreen","setPlaylists","isMenuOpen","setIsMenuOpen","updatedPlaylists","updatedShows","Header","toggleMenu","SlidingMenu","isOpen","closeMenu","Carousel","NewTrailers","TvCard"],"sourceRoot":""}