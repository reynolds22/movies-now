{"version":3,"file":"static/js/624.37f6e4f7.chunk.js","mappings":"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","sources":["component/MovieDetails.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./movieDetails.css\";\n\nexport default function MovieDetails({ addMovieToPlaylist, playlists }) {\n  const { id, type } = useParams(); // `type` determines if it's a movie or TV show\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [trailerKey, setTrailerKey] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPopupOpen, setIsPopupOpen] = useState(false); // State for popup visibility\n  const [selectedPlaylistId, setSelectedPlaylistId] = useState(null); // State for selected playlist\n\n  const API_KEY = \"808196157aa973f359929571d9321e60\";\n\n  useEffect(() => {\n    console.log(\"Fetching details for:\", { id, type }); // Log ID and type\n  \n    const fetchMovieDetails = async () => {\n      try {\n        const endpointType = type === \"movie\" ? \"movie\" : \"tv\";\n  \n        // Fetch Details\n        const detailsRes = await fetch(\n          `https://api.themoviedb.org/3/${endpointType}/${id}?api_key=${API_KEY}&language=en-US`\n        );\n        const detailsData = await detailsRes.json();\n        console.log(\"Details Data:\", detailsData); // Log fetched data\n        setMovie(detailsData);\n  \n        // Fetch Credits\n        const creditsRes = await fetch(\n          `https://api.themoviedb.org/3/${endpointType}/${id}/credits?api_key=${API_KEY}`\n        );\n        const creditsData = await creditsRes.json();\n        console.log(\"Credits Data:\", creditsData); // Log cast data\n        setCast(creditsData.cast.slice(0, 10)); // Set top 10 cast members\n  \n        // Fetch Videos\n        const videosRes = await fetch(\n          `https://api.themoviedb.org/3/${endpointType}/${id}/videos?api_key=${API_KEY}&language=en-US`\n        );\n        const videosData = await videosRes.json();\n        console.log(\"Videos Data:\", videosData); // Log fetched videos data\n        const trailer = videosData.results.find((video) => video.type === \"Trailer\");\n        setTrailerKey(trailer?.key || null); // Set trailer key\n  \n        setIsLoading(false); // Mark loading as complete\n      } catch (error) {\n        console.error(\"Failed to fetch movie details:\", error);\n        setIsLoading(false); // Mark loading as complete even if there's an error\n      }\n    };\n  \n    fetchMovieDetails(); \n  }, [id, type]);\n      \n  const handleAddToPlaylist = () => {\n    if (selectedPlaylistId) {\n      const standardizedItem = {\n        id: movie.id,\n        title: movie.title || movie.name || \"Untitled\",\n        poster_path: movie.poster_path || null,\n        release_date: movie.release_date || movie.first_air_date || \"N/A\",\n        vote_average: movie.vote_average || 0,\n      };\n  \n      console.log(\"Adding item to playlist:\", standardizedItem); // Debugging\n      addMovieToPlaylist(selectedPlaylistId, standardizedItem);\n      setIsPopupOpen(false);\n    }\n  };\n  \n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!movie) {\n    return <div>Movie details not found.</div>;\n  }\n\n  return (\n    <div className=\"movie-details\">\n      <button className=\"back-button\" onClick={() => navigate(-1)}>\n        <FontAwesomeIcon icon={faArrowLeft} /> Back\n      </button>\n\n      <div className=\"movie-banner\">\n        <img\n          src={\n            movie.backdrop_path\n              ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}`\n              : \"default.jpg\" // Fallback for missing images\n          }\n          alt={movie.title || movie.name || \"Image not available\"}\n        />\n      </div>\n\n      <div className=\"movie-info\">\n        <h1>{movie.title || movie.name || \"Title not available\"}</h1>\n        <p>{movie.overview || \"Description not available.\"}</p>\n\n        <div className=\"movie-stats\">\n          <p>\n            <FontAwesomeIcon icon={faStar} /> Rating:{\" \"}\n            {movie.vote_average ? movie.vote_average.toFixed(1) : \"N/A\"}\n          </p>\n          <p>\n            Release Date:{\" \"}\n            {movie.release_date || movie.first_air_date || \"N/A\"}\n          </p>\n        </div>\n\n        <button\n          className=\"add-to-playlist\"\n          onClick={() => setIsPopupOpen(true)} // Open popup\n        >\n          Add to Playlist\n        </button>\n      </div>\n\n      {trailerKey && (\n        <div className=\"movie-trailer\">\n          <h2>Trailer</h2>\n          <iframe\n            src={`https://www.youtube.com/embed/${trailerKey}`}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            title=\"Trailer\"\n          ></iframe>\n        </div>\n      )}\n\n      <div className=\"movie-cast\">\n        <h2>Cast</h2>\n        <ul>\n          {cast.map((member) => (\n            <li key={member.id}>\n              <img\n                src={\n                  member.profile_path\n                    ? `https://image.tmdb.org/t/p/w200${member.profile_path}`\n                    : \"default_profile.jpg\" // Fallback for missing cast images\n                }\n                alt={member.name}\n              />\n              <p>{member.name}</p>\n              <p>as {member.character}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Playlist Selection Popup */}\n      {isPopupOpen && (\n        <div className=\"popup-overlay\">\n          <div className=\"popup\">\n            <h2>Select Playlist</h2>\n            <ul>\n              {playlists.map((playlist) => (\n                <li key={playlist.id}>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name=\"playlist\"\n                      value={playlist.id}\n                      onChange={() => setSelectedPlaylistId(playlist.id)}\n                    />\n                    {playlist.name}\n                  </label>\n                </li>\n              ))}\n            </ul>\n            <button onClick={handleAddToPlaylist}>Add</button>\n            <button onClick={() => setIsPopupOpen(false)}>Cancel</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["MovieDetails","_ref","addMovieToPlaylist","playlists","id","type","useParams","navigate","useNavigate","movie","setMovie","useState","cast","setCast","trailerKey","setTrailerKey","isLoading","setIsLoading","isPopupOpen","setIsPopupOpen","selectedPlaylistId","setSelectedPlaylistId","API_KEY","useEffect","console","log","async","endpointType","detailsRes","fetch","detailsData","json","creditsRes","creditsData","slice","videosRes","videosData","trailer","results","find","video","key","error","fetchMovieDetails","_jsx","children","_jsxs","className","onClick","FontAwesomeIcon","icon","faArrowLeft","src","backdrop_path","alt","title","name","overview","faStar","vote_average","toFixed","release_date","first_air_date","frameBorder","allow","allowFullScreen","map","member","profile_path","character","playlist","value","onChange","handleAddToPlaylist","standardizedItem","poster_path"],"sourceRoot":""}