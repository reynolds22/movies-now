{"version":3,"file":"static/js/295.a22897bf.chunk.js","mappings":"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","sources":["component/AddToPlaylistPopup.jsx","component/Footer.jsx","component/carousel.jsx","component/MovieCard.jsx","component/TvCard.jsx","component/newMovies.jsx","component/index.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./AddToPlaylistPopup.css\";\n\nexport default function AddToPlaylistPopup({ playlists, onAdd, onClose, position }) {\n    return (\n        <div\n            className=\"popup-container\"\n            style={{ top: position.top, left: position.left }}\n        >\n            <h3>Select a Playlist</h3> \n            <ul>\n                {playlists.map((playlist) => (\n                    <li key={playlist.id}>\n<button\n  onClick={() => {\n    console.log(\"Adding to Playlist ID:\", playlist.id); // Debug playlist ID\n    if (onAdd) {\n      onAdd(playlist.id); // Call the onAdd function with playlist ID\n    } else {\n      console.error(\"onAdd function is missing\");\n    }\n  }}\n>\n  {playlist.name}\n</button>\n                    </li>\n                ))}\n            </ul>\n            <button className=\"close-btn\" onClick={onClose}>\n                Close\n            </button>\n        </div>\n    );\n}\n","// Footer.jsx\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInstagram, faFacebook, faXTwitter, faTwitch, faTiktok, faYoutube } from '@fortawesome/free-brands-svg-icons';\nimport \"./Footer.css\"; \n\nfunction Footer() {\n  return (\n    <footer>\n      <div className=\"ze-logo\">\n        <h3>Movies Now</h3>\n      </div>\n      <div className=\"pro-sources\">\n        <h3>Project Sources</h3> \n        <hr />\n        <ul>\n          <li>TMDB - API for movie info</li>\n          <li>YouTube API - For trailers</li>\n          <li>Google Fonts - For fonts</li>\n          <li>Font Awsome - For icons</li>\n          <li>ChatGPT - For learning</li>\n          <li>Other movie platforms - For UI inspiration</li>\n        </ul>\n      </div>\n      <div>\n        <h3 className='social-color'>Social</h3>\n        <hr />\n        <div className=\"social-icons\">\n          <FontAwesomeIcon icon={faInstagram} className=\"icons\" />\n          <FontAwesomeIcon icon={faFacebook} className=\"icons\" />\n          <FontAwesomeIcon icon={faXTwitter} className=\"icons\" />\n          <FontAwesomeIcon icon={faTwitch} className=\"icons\" />\n          <FontAwesomeIcon icon={faTiktok} className=\"icons\" />\n          <FontAwesomeIcon icon={faYoutube} className=\"icons\" />\n        </div>\n      </div>\n      <div>\n        <button onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n          &#8593; back to top &#8593;\n        </button>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useState, useEffect} from 'react';\nimport \"./carousel.css\";\nimport image1 from \"./pics/Best-Movie.jpg\";\nimport image2 from \"./pics/Gladiator.avif\";\nimport image3 from \"./pics/new.webp\";\nimport image4 from \"./pics/older.jpeg\";\nimport image5 from \"./pics/JFHpU0id.jpeg\";\nimport image6 from \"./pics/animated.jpg\";\n\nconst images = [image1, image2, image3, image4, image5, image6];\n\nfunction Carousel(){\n    const [currentFrame, setCurrentFrame] = useState(0);\n\n    useEffect(()=>{\n        const timer = setInterval(() => {\n            setCurrentFrame(prevIndex => (prevIndex + 1) % images.length);\n        }, 7000);\n        return () => clearInterval(timer);\n    }, []);\n\n    return (\n        <div className='carousel'>\n            <div \n                className=\"carousel-inner\"\n                style={{ transform: `translateX(-${currentFrame * 100}%)` }}\n            >\n                {images.map((image, index) => (\n                    <div \n                        className=\"carousel-item\"\n                        key={index}\n                        style={{ backgroundImage: `url(${image})` }}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Carousel;\n","import React, { useState, useEffect } from \"react\";\nimport \"./movieCard.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport AddToPlaylistPopup from \"./AddToPlaylistPopup\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_Key = \"808196157aa973f359929571d9321e60\";\nconst DISCOVER_URL = \"https://api.themoviedb.org/3/discover/movie\";\nconst CATEGORY_URL = \"https://api.themoviedb.org/3/movie\";\n\nexport default function MovieCard({\n  title,\n  category,\n  pages = 1,\n  genreId,\n  keyword,\n  playlists,\n  addMovieToPlaylist,\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      let allMovies = [];\n      for (let page = 1; page <= pages; page++) {\n        try {\n          const url = genreId || keyword\n            ? `${DISCOVER_URL}?api_key=${API_Key}&page=${page}&with_genres=${genreId || \"\"}&with_keywords=${keyword || \"\"}`\n            : `${CATEGORY_URL}/${category}?api_key=${API_Key}&page=${page}`;\n          const response = await fetch(url);\n          const data = await response.json();\n          if (data.results) allMovies = [...allMovies, ...data.results];\n        } catch (err) {\n          console.error(\"Error fetching movies:\", err);\n        }\n      }\n      setMovies(allMovies);\n    };\n    fetchMovies();\n  }, [category, pages, genreId, keyword]);\n\n  const handleCardClick = (movie) => {\n    navigate(`/details/movie/${movie.id}`);\n  };\n\n  const handleOpenPopup = (movie, event) => {\n    const buttonRect = event.target.getBoundingClientRect();\n    setPopupPosition({\n      top: buttonRect.bottom + window.scrollY,\n      left: buttonRect.left + window.scrollX,\n    });\n    setSelectedMovie(movie);\n    setIsPopupOpen(true);\n  };\n\n  const handleAddToPlaylist = (playlistId) => {\n    addMovieToPlaylist(playlistId, selectedMovie);\n    setIsPopupOpen(false);\n  };\n\n  return (\n    <div className=\"card-container\">\n      <h2>{title}</h2>\n      <div className=\"Popular-movies\">\n        {movies.map((movie, index) => (\n          <div\n            className=\"film-card\"\n            key={`${movie.id}-${index}`}\n            onClick={() => handleCardClick(movie)}\n          >\n            <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n            <h3>{movie.title}</h3>\n            <button\n              className=\"add-movie\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleOpenPopup(movie, e);\n              }}\n            >\n              <FontAwesomeIcon className=\"list-img\" icon={faList} />\n              <p>Add Movie</p>\n            </button>\n            <div className=\"stars\">\n              <p className=\"p1\">{movie.release_date ? movie.release_date.slice(0, 4) : \"N/A\"}</p>\n              <div className=\"p2\">\n                <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                <p>{movie.vote_average ? movie.vote_average.toFixed(1) : \"N/A\"}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div> \n      {isPopupOpen && (\n        <AddToPlaylistPopup\n          playlists={playlists}\n          onAdd={handleAddToPlaylist}\n          onClose={() => setIsPopupOpen(false)}\n          position={popupPosition}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./TvCard.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport AddToPlaylistPopup from \"./AddToPlaylistPopup\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_Key = \"808196157aa973f359929571d9321e60\";\nconst TV_BASE_URL = \"https://api.themoviedb.org/3/tv\";\nconst TV_DISCOVER_URL = \"https://api.themoviedb.org/3/discover/tv\";\n\nfunction TvCard({ title, category, pages = 1, genreId, keyword, playlists, addShowToPlaylist }) {\n    const [shows, setShows] = useState([]);\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [selectedShow, setSelectedShow] = useState(null);\n    const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchShows = async () => {\n            let allShows = [];\n            for (let page = 1; page <= pages; page++) {\n                try {\n                    const url = genreId || keyword\n                        ? `${TV_DISCOVER_URL}?api_key=${API_Key}&page=${page}&with_genres=${genreId || \"\"}&with_keywords=${keyword || \"\"}`\n                        : `${TV_BASE_URL}/${category}?api_key=${API_Key}&page=${page}`;\n                    const response = await fetch(url);\n                    const data = await response.json();\n                    if (data.results) allShows = [...allShows, ...data.results];\n                } catch (err) {\n                    console.error(\"Error fetching shows:\", err);\n                }\n            }\n            setShows(allShows);\n        };\n        fetchShows();\n    }, [category, pages, genreId, keyword]);\n\n    const handleCardClick = (show) => {\n        navigate(`/details/tv/${show.id}`);\n    };\n\n    const handleOpenPopup = (show, event) => {\n        const buttonRect = event.target.getBoundingClientRect();\n        setPopupPosition({\n            top: buttonRect.bottom + window.scrollY,\n            left: buttonRect.left + window.scrollX,\n        });\n        setSelectedShow(show);\n        setIsPopupOpen(true);\n    };\n\n    const handleAddToPlaylist = (playlistId) => {\n        if (selectedShow) {\n          const standardizedShow = {\n            id: selectedShow.id,\n            name: selectedShow.name || \"Untitled Show\",\n            poster_path: selectedShow.poster_path || null,\n            first_air_date: selectedShow.first_air_date || \"N/A\",\n            vote_average: selectedShow.vote_average || 0,\n          };\n      \n          console.log(\"Adding selected show to playlist:\", standardizedShow); // Debugging\n          addShowToPlaylist(playlistId, standardizedShow);\n          setIsPopupOpen(false);\n        }\n      };\n            \n    return (\n        <div className=\"tv-card-container\">\n            <h2>{title}</h2>\n            <div className=\"Popular-tv\">\n                {shows.map((show, index) => (\n                    <div\n                        className=\"film-card\"\n                        key={`${title}-${index}-${show.id}`}\n                        onClick={() => handleCardClick(show)}\n                    >\n                        <img src={`https://image.tmdb.org/t/p/w500${show.poster_path}`} alt={show.name} />\n                        <h3>{show.name}</h3>\n                        <button\n                            className=\"add-movie\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                handleOpenPopup(show, e);\n                            }}\n                        >\n                            <FontAwesomeIcon className=\"list-img\" icon={faList} />\n                            <p>Add to Playlist</p>\n                        </button>\n                        <div className=\"stars\">\n                            <p className=\"p1\">{show.first_air_date ? show.first_air_date.slice(0, 4) : \"N/A\"}</p>\n                            <div className=\"p2\">\n                                <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                                <p>{show.vote_average ? show.vote_average.toFixed(1) : \"N/A\"}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            {isPopupOpen && (\n                <AddToPlaylistPopup\n                    playlists={playlists}\n                    onAdd={handleAddToPlaylist}\n                    onClose={() => setIsPopupOpen(false)}\n                    position={popupPosition}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default TvCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./newMovies.css\";\n\nconst API_Key = '808196157aa973f359929571d9321e60';\nconst UPCOMING_URL = `https://api.themoviedb.org/3/movie/upcoming`;\nconst VIDEOS_URL = 'https://api.themoviedb.org/3/movie';\n\nfunction MovieCard({ trailerIndex }) {\n    const [trailers, setTrailers] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchUpcomingMoviesAndTrailers = async () => {\n            try {\n                const response = await fetch(`${UPCOMING_URL}?api_key=${API_Key}`);\n                const data = await response.json();\n                const upcomingMovies = data.results.slice(0, 5); // Limit to 5 movies\n\n                const movieTrailerPromises = upcomingMovies.map(async (movie) => {\n                    const trailerResponse = await fetch(`${VIDEOS_URL}/${movie.id}/videos?api_key=${API_Key}`);\n                    const trailerData = await trailerResponse.json();\n                    const trailer = trailerData.results.find((video) => video.type === \"Trailer\");\n                    return { ...movie, trailer };\n                });\n\n                const trailersWithVideos = await Promise.all(movieTrailerPromises);\n                setTrailers(trailersWithVideos);\n                setIsLoading(false);\n            } catch (err) {\n                console.error('Error fetching trailers:', err);\n            }\n        };\n\n        fetchUpcomingMoviesAndTrailers();\n    }, []);\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    if (!trailers[trailerIndex] || !trailers[trailerIndex].trailer) {\n        return <div>No trailer available for this movie.</div>;\n    }\n\n    const selectedTrailer = trailers[trailerIndex];\n\n    return (\n        <div className=\"movie-trailer-card\">\n            <h2>{`${selectedTrailer.title} Movie Trailer`}</h2>\n            <div className=\"trailer-con\">\n            <iframe\n                width=\"560\"\n                height=\"315\"\n                src={`https://www.youtube.com/embed/${selectedTrailer.trailer.key}?enablejsapi=1`} // Ensure `enablejsapi=1` for API control\n                title={selectedTrailer.title}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n            ></iframe>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieCard;\n","import React, { useState } from \"react\";\nimport Carousel from \"./carousel\";\nimport MovieCard from \"./MovieCard\";\nimport TvCard from \"./TvCard\";\nimport NewTrailers from \"./newMovies\";\nimport \"./styles.css\";\nimport Header from \"./header\";\nimport Footer from \"./Footer\";\nimport SlidingMenu from \"./SlidingMenu\";\n\nfunction MoviesNow({ playlists, setPlaylists, addMovieToPlaylist }) {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    const toggleMenu = () => {\n        setIsMenuOpen(!isMenuOpen);\n    };\n\n    const addShowToPlaylist = (playlistId, show) => {\n        console.log(\"Adding show:\", show);\n        console.log(\"To playlist ID:\", playlistId);\n    \n        const updatedPlaylists = playlists.map((playlist) => {\n            if (playlist.id === playlistId) {\n                console.log(\"Updating playlist:\", playlist.name);\n                const updatedShows = playlist.shows ? [...playlist.shows, show] : [show];\n                return { ...playlist, shows: updatedShows };\n            }\n            return playlist;\n        }); \n    \n        console.log(\"Updated playlists:\", updatedPlaylists);\n        setPlaylists(updatedPlaylists); // Update playlists state\n    };\n    \n    return (\n        <div className=\"container\">\n            <Header toggleMenu={toggleMenu} />\n            <SlidingMenu isOpen={isMenuOpen} closeMenu={() => setIsMenuOpen(false)} />\n            <div className=\"body\">\n                <div className=\"carousel-container\">\n                    <Carousel />\n                    <div className=\"h1-Container\">\n                        <h1>Movies Now</h1>\n                    </div>\n                </div>\n\n                {/* Movie Cards */}\n                <MovieCard\n                    title=\"In Theaters Now\"\n                    category=\"now_playing\"\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Upcoming Movies\"\n                    category=\"upcoming\"\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Action Movies\"\n                    genreId={28}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={0} />\n\n                <MovieCard\n                    title=\"Comedy Movies\"\n                    genreId={35}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Trending\"\n                    category=\"popular\"\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Superhero Movies\"\n                    keyword=\"9715\"\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={1} />\n\n                <MovieCard\n                    title=\"Horror Movies\"\n                    genreId={27}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Animated Movies\"\n                    genreId={16}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Sci-Fi Movies\"\n                    genreId={878}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={2} />\n\n                {/* TV Cards */}\n                <TvCard\n                    title=\"Popular TV Shows\"\n                    category=\"popular\"\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Comedy TV Shows\"\n                    genreId={35}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Drama TV Shows\"\n                    genreId={18}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Action & Adventure TV Shows\"\n                    genreId={10759}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n                <TvCard\n                    title=\"Sci-Fi & Fantasy TV Shows\"\n                    genreId={10765}\n                    pages={2}\n                    playlists={playlists}\n                    addShowToPlaylist={addShowToPlaylist}\n                />\n\n                <NewTrailers trailerIndex={3} />\n\n                <MovieCard\n                    title=\"Adventure\"\n                    genreId={878}\n                    pages={3}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Family\"\n                    genreId={10751}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Documentary\"\n                    genreId={99}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n                <MovieCard\n                    title=\"Drama Movies\"\n                    genreId={18}\n                    pages={2}\n                    playlists={playlists}\n                    addMovieToPlaylist={addMovieToPlaylist}\n                />\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default MoviesNow;\n"],"names":["AddToPlaylistPopup","_ref","playlists","onAdd","onClose","position","_jsxs","className","style","top","left","children","_jsx","map","playlist","onClick","console","log","id","error","name","FontAwesomeIcon","icon","faInstagram","faFacebook","faXTwitter","faTwitch","faTiktok","faYoutube","window","scrollTo","behavior","images","image1","image2","image3","image4","image5","image6","currentFrame","setCurrentFrame","useState","useEffect","timer","setInterval","prevIndex","length","clearInterval","transform","image","index","backgroundImage","API_Key","DISCOVER_URL","CATEGORY_URL","MovieCard","title","category","pages","genreId","keyword","addMovieToPlaylist","movies","setMovies","isPopupOpen","setIsPopupOpen","selectedMovie","setSelectedMovie","popupPosition","setPopupPosition","navigate","useNavigate","async","allMovies","page","url","response","fetch","data","json","results","err","fetchMovies","movie","handleCardClick","src","poster_path","alt","e","stopPropagation","handleOpenPopup","event","buttonRect","target","getBoundingClientRect","bottom","scrollY","scrollX","faList","release_date","slice","faStar","vote_average","toFixed","playlistId","addShowToPlaylist","shows","setShows","selectedShow","setSelectedShow","allShows","fetchShows","show","first_air_date","standardizedShow","trailerIndex","trailers","setTrailers","isLoading","setIsLoading","movieTrailerPromises","trailerResponse","trailer","find","video","type","trailersWithVideos","Promise","all","fetchUpcomingMoviesAndTrailers","selectedTrailer","width","height","key","frameBorder","allow","allowFullScreen","setPlaylists","isMenuOpen","setIsMenuOpen","updatedPlaylists","updatedShows","Header","toggleMenu","SlidingMenu","isOpen","closeMenu","Carousel","NewTrailers","TvCard","Footer"],"sourceRoot":""}