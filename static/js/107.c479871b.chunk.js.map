{"version":3,"file":"static/js/107.c479871b.chunk.js","mappings":"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","sources":["component/AddToPlaylistPopup.jsx","component/Footer.jsx","component/PlaylistDetail.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./AddToPlaylistPopup.css\";\n\nexport default function AddToPlaylistPopup({ playlists, onAdd, onClose, position }) {\n    return (\n        <div\n            className=\"popup-container\"\n            style={{ top: position.top, left: position.left }}\n        >\n            <h3>Select a Playlist</h3> \n            <ul>\n                {playlists.map((playlist) => (\n                    <li key={playlist.id}>\n<button\n  onClick={() => {\n    console.log(\"Adding to Playlist ID:\", playlist.id); // Debug playlist ID\n    if (onAdd) {\n      onAdd(playlist.id); // Call the onAdd function with playlist ID\n    } else {\n      console.error(\"onAdd function is missing\");\n    }\n  }}\n>\n  {playlist.name}\n</button>\n                    </li>\n                ))}\n            </ul>\n            <button className=\"close-btn\" onClick={onClose}>\n                Close\n            </button>\n        </div>\n    );\n}\n","// Footer.jsx\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInstagram, faFacebook, faXTwitter, faTwitch, faTiktok, faYoutube } from '@fortawesome/free-brands-svg-icons';\nimport \"./Footer.css\"; \n\nfunction Footer() {\n  return (\n    <footer>\n      <div className=\"ze-logo\">\n        <h3>Movies Now</h3>\n      </div>\n      <div className=\"pro-sources\">\n        <h3>Project Sources</h3> \n        <hr />\n        <ul>\n          <li>TMDB - API for movie info</li>\n          <li>YouTube API - For trailers</li>\n          <li>Google Fonts - For fonts</li>\n          <li>Font Awsome - For icons</li>\n          <li>ChatGPT - For learning</li>\n          <li>Other movie platforms - For UI inspiration</li>\n        </ul>\n      </div>\n      <div>\n        <h3 className='social-color'>Social</h3>\n        <hr />\n        <div className=\"social-icons\">\n          <FontAwesomeIcon icon={faInstagram} className=\"icons\" />\n          <FontAwesomeIcon icon={faFacebook} className=\"icons\" />\n          <FontAwesomeIcon icon={faXTwitter} className=\"icons\" />\n          <FontAwesomeIcon icon={faTwitch} className=\"icons\" />\n          <FontAwesomeIcon icon={faTiktok} className=\"icons\" />\n          <FontAwesomeIcon icon={faYoutube} className=\"icons\" />\n        </div>\n      </div>\n      <div>\n        <button onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n          &#8593; back to top &#8593;\n        </button>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport AddToPlaylistPopup from \"./AddToPlaylistPopup\";\nimport \"./PlaylistDetail.css\";\nimport Footer from \"./Footer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList, faStar } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function PlaylistDetail({\n  playlists,\n  setPlaylists,\n  addMovieToPlaylist,\n  addShowToPlaylist,\n}) {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });\n  const [draggedItemIndex, setDraggedItemIndex] = useState(null);\n\n  const playlist = playlists.find((pl) => pl.id === parseInt(id));\n  if (!playlist) {\n    return <p>Playlist not found</p>;\n  }\n  \n  // Add these logs here\n  console.log(\"Rendering playlist:\", playlist);\n  console.log(\"Movies in Playlist:\", playlist.movies);\n  console.log(\"Shows in Playlist:\", playlist.shows);\n  \n  // Handle Drag Start\n  const handleDragStart = (index) => {\n    if (!isEditMode) return;\n    setDraggedItemIndex(index);\n  };\n\n  // Handle Drag Over\n  const handleDragOver = (e) => {\n    if (!isEditMode) return;\n    e.preventDefault();\n  };\n\n  // Handle Drop\n  const handleDrop = (dropIndex, type) => {\n    if (\n      !isEditMode ||\n      draggedItemIndex === null ||\n      draggedItemIndex === dropIndex\n    )\n      return;\n\n    const updatedItems = [...playlist[type]];\n    const [draggedItem] = updatedItems.splice(draggedItemIndex, 1);\n    updatedItems.splice(dropIndex, 0, draggedItem);\n\n    setPlaylists((prev) =>\n      prev.map((pl) =>\n        pl.id === playlist.id ? { ...pl, [type]: updatedItems } : pl\n      )\n    );\n    setDraggedItemIndex(null);\n  };\n\n  // Save the current first movie as the playlist image\n  const handleSaveImage = () => {\n    if (playlist.movies.length > 0) {\n      const firstMovie = playlist.movies[0];\n      const newImage = `https://image.tmdb.org/t/p/w500${firstMovie.poster_path}`;\n      setPlaylists((prev) =>\n        prev.map((pl) =>\n          pl.id === playlist.id ? { ...pl, image: newImage } : pl\n        )\n      );\n    } else {\n      alert(\"No movies in the playlist to set as an image.\");\n    }\n  };\n\n  // Delete Playlist\n  const handleDeletePlaylist = () => {\n    const confirmDelete = window.confirm(\n      \"Are you sure you want to delete this playlist?\"\n    );\n    if (confirmDelete) {\n      setPlaylists(playlists.filter((pl) => pl.id !== playlist.id));\n      navigate(\"/playlists\");\n    }\n  };\n\n  // Open Add to Playlist Popup\n  const handleOpenPopup = (show, event) => {\n    console.log(\"Opening popup for show:\", show); // Debugging\n    const buttonRect = event.target.getBoundingClientRect();\n    setPopupPosition({\n      top: buttonRect.bottom + window.scrollY,\n      left: buttonRect.left + window.scrollX,\n    });\n    setSelectedItem(show);\n    setIsPopupOpen(true);\n  };\n  \n  // Handle Card Click\n  const handleCardClick = (item) => {\n    console.log(\"Clicked Item:\", item, \"Type:\", item.type);\n    navigate(`/details/${item.type}/${item.id}`);\n  };\n      \n  return (\n    <div>\n      <div className=\"playlist-detail\">\n        <div className=\"top-bar\">\n          <button onClick={() => navigate(-1)} className=\"back-arrow\">\n            ← Back\n          </button>\n          <button\n            onClick={() => setIsEditMode(!isEditMode)}\n            className=\"edit-button\"\n          >\n            {isEditMode ? \"Done\" : \"Edit\"}\n          </button>\n        </div>\n\n        <div className=\"playlist-info\">\n          <img\n            className=\"playlist-image\"\n            src={playlist.image || \"default.jpg\"}\n            alt={playlist.name}\n          />\n          <h2>{playlist.name}</h2>\n          <p>{playlist.description}</p>\n\n          {isEditMode && (\n            <div className=\"action-buttons\">\n              <button onClick={handleSaveImage} className=\"save-img-button\">\n                Save Playlist Image\n              </button>\n              <button\n                onClick={handleDeletePlaylist}\n                className=\"delete-playlist-button\"\n              >\n                Delete Playlist\n              </button>\n            </div>\n          )}\n\n          {isEditMode && (\n            <>\n              <div className=\"info-box left-info\">\n                <p>\n                  Use the <strong>Save Playlist Image</strong> button to save\n                  the first movie's image as the playlist cover.\n                </p>\n              </div>\n              <div className=\"info-box right-info\">\n                <p>\n                  Drag and drop movies or shows to rearrange their order. This\n                  feature is only available in edit mode.\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n\n        <div className=\"playlist-movies\">\n          {/* Render Movies */}\n          {playlist.movies.map((movie, index) => (\n            <div\n              key={`movie-${movie.id}`}\n              className=\"film-card\"\n              draggable={isEditMode}\n              onDragStart={() => handleDragStart(index)}\n              onDragOver={handleDragOver}\n              onDrop={() => handleDrop(index, \"movies\")}\n              onClick={() => handleCardClick(movie, \"movie\")}\n            >\n              <img\n                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                alt={movie.title || movie.name}\n              />\n              <h3>{movie.title || movie.name}</h3>\n              {isEditMode && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setPlaylists((prev) =>\n                      prev.map((pl) =>\n                        pl.id === playlist.id\n                          ? {\n                              ...pl,\n                              movies: pl.movies.filter(\n                                (m) => m.id !== movie.id\n                              ),\n                            }\n                          : pl\n                      )\n                    );\n                  }}\n                  className=\"add-movie\"\n                >\n                  Delete Movie\n                </button>\n              )}\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleOpenPopup(movie, e);\n                }}\n                className=\"add-movie\"\n              >\n                <FontAwesomeIcon className=\"list-img\" icon={faList} />\n                <p>Add to Playlist</p>\n              </button>\n              <div className=\"stars\">\n                <p className=\"p1\">\n                  {movie.release_date\n                    ? movie.release_date.slice(0, 4)\n                    : \"N/A\"}\n                </p>\n                <div className=\"p2\">\n                  <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                  <p>\n                    {movie.vote_average\n                      ? movie.vote_average.toFixed(1)\n                      : \"N/A\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {/* Render Shows */}\n          {playlist.shows?.map((show, index) => (\n            <div\n              key={`show-${show.id}`}\n              className=\"film-card\"\n              draggable={isEditMode}\n              onDragStart={() => handleDragStart(index)}\n              onDragOver={handleDragOver}\n              onDrop={() => handleDrop(index, \"shows\")}\n              onClick={() => handleCardClick(show, \"tv\")}\n            >\n              <img\n                src={`https://image.tmdb.org/t/p/w500${show.poster_path}`}\n                alt={show.title || show.name || \"Show Image\"}\n              />\n              <h3>{show.title || show.name}</h3>\n              {isEditMode && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setPlaylists((prev) =>\n                      prev.map((pl) =>\n                        pl.id === playlist.id\n                          ? {\n                              ...pl,\n                              shows: pl.shows.filter((s) => s.id !== show.id),\n                            }\n                          : pl\n                      )\n                    );\n                  }}\n                  className=\"add-movie\"\n                >\n                  Delete Show\n                </button>\n              )}\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleOpenPopup(show, e);\n                }}\n                className=\"add-movie\"\n              >\n                <FontAwesomeIcon className=\"list-img\" icon={faList} />\n                <p>Add to Playlist</p>\n              </button>\n              <div className=\"stars\">\n                <p className=\"p1\">\n                  {show.first_air_date\n                    ? show.first_air_date.slice(0, 4)\n                    : \"N/A\"}\n                </p>\n                <div className=\"p2\">\n                  <FontAwesomeIcon id=\"rate-star\" icon={faStar} />\n                  <p>\n                    {show.vote_average\n                      ? show.vote_average.toFixed(1)\n                      : \"N/A\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))} \n        </div>\n\n        {isPopupOpen && (\n          <AddToPlaylistPopup\n          playlists={playlists}\n          onAdd={(playlistId) => {\n            if (selectedItem?.first_air_date) {\n              console.log(\"Adding show to playlist from PlaylistDetail:\", selectedItem);\n              addShowToPlaylist(playlistId, selectedItem); // This must be correctly passed\n            } else {\n              console.log(\"Adding movie to playlist from PlaylistDetail:\", selectedItem);\n              addMovieToPlaylist(playlistId, selectedItem);\n            }\n            setIsPopupOpen(false);\n          }}\n          onClose={() => setIsPopupOpen(false)}\n          position={popupPosition}\n        />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n"],"names":["AddToPlaylistPopup","_ref","playlists","onAdd","onClose","position","_jsxs","className","style","top","left","children","_jsx","map","playlist","onClick","console","log","id","error","name","FontAwesomeIcon","icon","faInstagram","faFacebook","faXTwitter","faTwitch","faTiktok","faYoutube","window","scrollTo","behavior","PlaylistDetail","_playlist$shows","setPlaylists","addMovieToPlaylist","addShowToPlaylist","useParams","navigate","useNavigate","isEditMode","setIsEditMode","useState","isPopupOpen","setIsPopupOpen","selectedItem","setSelectedItem","popupPosition","setPopupPosition","draggedItemIndex","setDraggedItemIndex","find","pl","parseInt","movies","shows","handleDragStart","index","handleDragOver","e","preventDefault","handleDrop","dropIndex","type","updatedItems","draggedItem","splice","prev","handleOpenPopup","show","event","buttonRect","target","getBoundingClientRect","bottom","scrollY","scrollX","handleCardClick","item","src","image","alt","description","handleSaveImage","length","newImage","poster_path","alert","handleDeletePlaylist","confirm","filter","_Fragment","movie","draggable","onDragStart","onDragOver","onDrop","title","stopPropagation","m","faList","release_date","slice","faStar","vote_average","toFixed","s","first_air_date","playlistId","Footer"],"sourceRoot":""}